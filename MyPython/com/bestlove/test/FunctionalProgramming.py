# -*- coding: utf-8 -*-
'''
    函数是Python内建支持的一种封装，我们通过把大把代码拆成函数，
    通过一层一层的函数调用，就可以把复杂任务分解成简单的任务，
    这种分解可以称之为面向过程的程序设计。函数就是面向过程设计的基本单元
    而函数式编程（请注意多了一个“式”字）——Functional Programming，
    虽然也可以归结到面向过程的程序设计，但其思想更接近数学计算。

    越是抽象的计算，离计算机越远。
    对应到编程语言，就是越低级的语言，越贴近计算机，抽象程度越低，执行效率越高
    比如C语言，越高级的语言，越贴近计算，抽象程度越高，执行效率越低，比如Lisp语言

    函数式变成就是一种抽象程度很高的编程范式，纯粹的函数式编程语言编写的函数没有变量，
    因此，任意一个函数，只要输入时确定的，输出就是确定的，这种纯函数我们称之为没有副作用。
    而允许使用变量的程序设计语言，由于函数内部的变量状态不确定，同样的输入，
    可能得到不同的输出，因此，这种函数是有副作用的。

    函数式编程的一个特点就是，允许把函数本身作为参数传入另一个函数，还允许返回一个函数！

    Python对函数式编程提供部分支持。由于Python允许使用变量，因此，Python不是纯函数式编程语言。

'''

# 高阶函数 Higher-order function
def higher_order():
    abs(-10)# abs(-10)是函数调用
    abs # abs是函数本身
    a = abs(-100) # 获得函数调用的结果可以赋值给变量
    print(a)
    # 函数本身也可以赋值给变量
    b = abs
    print(b(-89)) # 直接调用abs()函数和调用变量b()完全相同
    # 函数名其实就是指向函数的变量！对于abs()这个函数，
    # 完全可以把函数名abs看成变量，它指向一个可以计算绝对值的函数！
    # abs函数实际上是定义在__builtin__模块中的
'''
    传入函数
        既然变量可以指向函数，函数的参数能接受变量，
        那么一个函数就可以接收另一个函数作为参数，
        这种函数就称之为高阶函数
'''
def add(x,y,f):
    return f(x)+f(y)


def my_test():
    higher_order()
    m = add(3,-5,abs) # 传入函数名 高阶函数
    print(m)

def main():
    my_test()


if __name__ == '__main__':
    main()
